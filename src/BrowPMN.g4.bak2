grammar BrowPMN;

@header {
import struct.*;
}

prog returns [Node result]
    : (s=sttm)+ {$result = $s.result;}
    ;


sttm returns [Node result]
    : (funcao)+ {$result = $funcao.result;}
    | NEWLINE
    ;


funcao returns [Node result]
    : FUNCTAG func=ID LPAR (var1=ID (COMMA var2=ID)) RPAR LCOL codigo NEWLINE RCOL{
        $result = new Function($func, $var1, $var2).setCode($codigo.result);
    }
//    : FUNCTAG ID LPAR (ID (COMMA ID)*)? RPAR LCOL codigo NEWLINE RCOL
    ;


valor returns [String result]
    : str = STRING {$result = new String($str);}
    ;


assinatura returns [Node result]
    : (id=ID) ATRIBUICAO valor {$result = new Variable('"'$id'"', $valor.result);}
    | TAGINICIO (id=ID) ATRIBUICAO valor {$result = new Start($id, $valor.result);}
    | TAGFIM (id=ID) ATRIBUICAO valor {$result = new End($id, $valor.result);}
    | fl=fluxo {$result = $fl.result;}
    //| (id=ID) ATRIBUICAO ID LPAR (ID (COMMA ID)*)? RPAR {$result = }
    //| co=condicional {$result = $co.result;}
    ;


codigo returns [Node result]
    : (as=assinatura {$result = $as.result;}
        | NEWLINE)+
    ;

fluxo returns [Node result]
    : (var=ID) PROXIMO (next=ID) {$result = Node.setNextNode($var, $next);}
    | (var=ID) PROXIMO (next=ID) (LPAR str=STRING RPAR) {$result = Node.setNextNode($var, $next, $str);}
    ;

/*
condicional returns [Node result]
    // Exclusivo
    :  if=exclusivo (elif=exclusivo_caminho)* (else=exclusivo_restante)? {$result = }
    // Paralelo
    | paralelo (paralelo_caminho)*
    // RepetiÃ§Ã£o
    | loop {$result = $loop.result;}
    ;


loop
    :  WHILE LPAR ID COMMA ID RPAR (LPAR STRING RPAR)? LCOL (assinatura)* NEWLINE RCOL (LPAR STRING RPAR)?
    ;


paralelo
    : DO LPAR ID COMMA ID RPAR (LPAR STRING RPAR)? LCOL (assinatura)* NEWLINE RCOL
    ;


paralelo_caminho : ELSE RPAR (LPAR STRING RPAR)? LCOL (assinatura)* NEWLINE RCOL
    ;


exclusivo
    : IF LPAR ID COMMA ID RPAR (LPAR STRING RPAR)? LCOL (assinatura)* NEWLINE RCOL
    ;


exclusivo_caminho
    : ELIF LPAR ID COMMA ID RPAR (LPAR STRING RPAR)? LCOL (assinatura)* NEWLINE RCOL
    ;


exclusivo_restante
    : ELSE RPAR (LPAR STRING RPAR)? LCOL (assinatura)* NEWLINE RCOL
    ;
*/





FUNCTAG : 'def';
COMMA : ',' ;
TAGINICIO : '!' ;
TAGFIM : '#' ;
LPAR : '(' ;
RPAR : ')' ;
PROXIMO : '->' ;
LCOL : '{' ;
RCOL : '}' ;
fragment WS : ' ';
fragment CHAR : [a-zA-Z0-9];
fragment STRTAG : '"' ;
STRING : STRTAG (CHAR|WS)* STRTAG;
ID : [_a-zA-Z][_a-zA-Z0-9]* ;
NEWLINE : '\r'? '\n' ;
ATRIBUICAO    : '=' ;
WHILE : 'while' ;
IF : 'if' ;
ELIF : 'elif';
ELSE : 'else' ;
DO : 'do';
AND : 'and';
IGNORE : [ \t\r\n]+ -> skip;
